(()=>{"use strict";class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.jsonData=this.getContractInfo(),this.render()}getContractInfo(){let t=this.cad;for(const n of t)try{const t=n[1].interaction.callAssociatedData.CONTRACT_INFO.value;if("string"==typeof t){const n=t.replace(/\\\\\\"/g,'"').replace(/\\\\/g,"\\");return JSON.parse(n)}return t}catch(t){return console.error("Error extracting contract info:",t),{error:"Invalid or missing CONTRAT_INFO"}}}GETNAME(){let t=this.cad;for(const n of t)try{return n[1].interaction.callAssociatedData.NAME.value}catch(t){return"error"}}GetLastName(){let t=this.cad;for(const n of t)try{return n[1].interaction.callAssociatedData.LAST_NAME.value}catch(t){return"error"}}GetNameUsage(){let t=this.cad;for(const n of t)try{return n[1].interaction.callAssociatedData.LAST_NAME_USAGE.value}catch(t){return"error"}}GetEmail(){let t=this.cad;for(const n of t)try{return n[1].interaction.callAssociatedData.EMAIL_USER.value}catch(t){return"error"}}GetIdPersonne(){let t=this.cad;for(const n of t)try{return n[1].interaction.callAssociatedData.ID_PERSONNE.value}catch(t){return"error"}}GetIdAgent(){let t=this.cad;for(const n of t)try{return n[1].interaction.callAssociatedData.ID_AGENT.value}catch(t){return"error"}}mediaInfo(){const t=this.cad;for(const n of t){const t=n[1].interaction.media;return Object.keys(t).map((n=>t[n]))}}activeParticipants(){const t=this.cad;for(const n of t){const t=n[1].interaction.media;return Object.keys(t).map((n=>{const{participants:e}=t[n];return e}))}}createTreeNode(t,n,e=!0){const o=document.createElement("div");o.classList.add("tree-node");const r=document.createElement("span");r.classList.add("label");const a=document.createElement("span");if(a.classList.add("toggle"),null!==n&&"object"==typeof n){a.textContent="+",o.appendChild(a),r.textContent=t,o.appendChild(r);const s=document.createElement("div");if(s.classList.add("children"),Array.isArray(n))n.forEach(((n,o)=>{const r=this.createTreeNode(`${t}[${o}]`,n,e);s.appendChild(r)}));else for(const t in n){const o=this.createTreeNode(t,n[t],e);s.appendChild(o)}o.appendChild(s),r.addEventListener("click",(()=>{const t=o.classList.toggle("expanded");a.textContent=t?"-":"+"})),e&&(o.classList.add("expanded"),a.textContent="-")}else a.textContent=" ",o.appendChild(a),r.textContent=`${t}: ${n}`,o.appendChild(r);return o}buildTree(t,n,e=!0){for(const o in n){const r=this.createTreeNode(o,n[o],e);t.appendChild(r)}}render(){const t=document.createElement("template");t.innerHTML=`\n  <style>\n    :host {\n      --primary: #007AA3;\n      --primary-hover: #005E7D;\n      --card-bg: rgba(255, 255, 255, 0.8);\n      --card-border: rgba(255, 255, 255, 0.3);\n      --text-color: #1a1a1a;\n      --shadow: 0 4px 12px rgba(0,0,0,0.1);\n      --radius: 16px;\n      font-family: "Inter", system-ui, sans-serif;\n      color: var(--text-color);\n    }\n\n    .container {\n      overflow: var(--flow, auto);\n      background: linear-gradient(135deg, #E0F7FA, #F3F4F6);\n      min-height: 100vh;\n      padding: 2rem;\n      display: flex;\n      justify-content: center;\n      align-items: flex-start;\n    }\n\n    .cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));\n      gap: 1.5rem;\n      width: 100%;\n      max-width: 1400px;\n    }\n\n    .card {\n      background: var(--card-bg);\n      border: 1px solid var(--card-border);\n      backdrop-filter: blur(12px);\n      border-radius: var(--radius);\n      padding: 1.2rem;\n      box-shadow: var(--shadow);\n      transition: transform 0.25s ease, box-shadow 0.25s ease;\n    }\n\n    .card:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 8px 20px rgba(0,0,0,0.15);\n    }\n\n    img {\n      margin-top: 15px;\n      border-radius: 12px;\n      width: 100%;\n      height: auto;\n      display: block;\n      object-fit: cover;\n    }\n\n    .hide {\n      display: none;\n    }\n\n    .btn, .btns, .btnpost {\n      border: none;\n      height: 40px;\n      padding: 0 20px;\n      border-radius: 24px;\n      background: var(--primary);\n      color: #fff;\n      font-weight: 500;\n      letter-spacing: 0.4px;\n      cursor: pointer;\n      transition: background 0.3s, transform 0.2s;\n      box-shadow: 0 3px 6px rgba(0,0,0,0.15);\n      margin-top: 10px;\n    }\n\n    .btn:hover, .btns:hover, .btnpost:hover {\n      background: var(--primary-hover);\n      transform: translateY(-2px);\n    }\n\n    pre {\n      background: #f3f3f3;\n      padding: 0.8rem;\n      border-radius: 8px;\n      overflow-x: auto;\n      font-size: 0.9rem;\n      margin-top: 1rem;\n    }\n\n    .form-motif {\n      width: 100%;\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n\n    .form-grid {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 2rem;\n      align-items: start;\n    }\n\n    .col-left label,\n    .col-right label {\n      font-weight: 600;\n      font-size: 0.95rem;\n      color: #333;\n      display: block;\n      margin-bottom: 0.4rem;\n    }\n\n    select,\n    textarea {\n      width: 90%;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n      padding: 0.5rem 0.75rem;\n      font-size: 0.9rem;\n      background-color: #fff;\n      box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);\n      transition: border 0.2s, box-shadow 0.2s;\n    }\n\n    select:focus,\n    textarea:focus {\n      outline: none;\n      border-color: var(--primary);\n      box-shadow: 0 0 0 3px rgba(0,122,163,0.2);\n    }\n\n    textarea {\n      resize: vertical;\n      min-height: 130px;\n    }\n\n    .col-right span {\n      font-size: 0.8rem;\n      font-weight: normal;\n      color: #666;\n    }\n\n    .form-footer {\n      display: flex;\n      justify-content: flex-end;\n      margin-top: 1rem;\n    }\n\n  </style>\n\n  <div class="container">\n    <div class="cards">\n      \n      <div class="card">\n        <h3 class="italic">Informations Utilisateur</h3>\n        <p><strong>Pr√©nom:</strong> ${this.GETNAME()}</p>\n        <p><strong>Nom:</strong> ${this.GetLastName()}</p>\n        <p><strong>Nom d‚Äôusage:</strong> ${this.GetNameUsage()}</p>\n        <p><strong>Email:</strong> ${this.GetEmail()}</p>\n        <p><strong>Id personne:</strong> ${this.GetIdPersonne()}</p>\n        <p><strong>Id agent:</strong> ${this.GetIdAgent()}</p>\n      </div>\n\n      <div id="treeContainer" class="card">\n        <h3 class="italic">Structure</h3>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">D√©tails</h3>\n        <button class="btn">Afficher les d√©tails</button>\n        <pre class="hide">${JSON.stringify(this.details,null,2)}</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Bouton m√©t√©o</h3>\n        <button class="btns">Afficher la m√©t√©o</button>\n        <pre class="hide"></pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Test POST API publique</h3>\n        <button class="btnpost">Tester un POST</button>\n        <pre id="postResult">R√©sultat du POST ici...</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Test POST avec Authentification (CRM Conservateur)</h3>\n        <button class="btncrm">Envoyer vers CRM</button>\n        <pre id="crmResult">R√©sultat du CRM ici...</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Motif de l'appel</h3>\n        <form id="motifForm" class="form-motif">\n          <div class="form-grid">\n            \x3c!-- Colonne gauche --\x3e\n            <div class="col-left">\n              <label>Motif :</label>\n              <select name="motif" required>\n                <option value="">-- S√©lectionner --</option>\n                <option value="1">Motif 1</option>\n                <option value="2">Motif 2</option>\n                <option value="3">Motif 3</option>\n              </select>\n\n              <label>Sous-motif 1 :</label>\n              <select name="sousMotif1">\n                <option value="">-- S√©lectionner --</option>\n                <option value="1">Sous-motif 1</option>\n                <option value="2">Sous-motif 2</option>\n                <option value="3">Sous-motif 3</option>\n              </select>\n\n              <label>Sous-motif 2 :</label>\n              <select name="sousMotif2">\n                <option value="">-- S√©lectionner --</option>\n                <option value="1">Sous-motif 1</option>\n                <option value="2">Sous-motif 2</option>\n                <option value="3">Sous-motif 3</option>\n              </select>\n            </div>\n\n            \x3c!-- Colonne droite --\x3e\n            <div class="col-right">\n              <label>Commentaires <span>(255 caract√®res)</span> :</label>\n              <textarea name="commentaire" rows="6" maxlength="255" placeholder="Saisissez un commentaire..."></textarea>\n            </div>\n          </div>\n\n          <div class="form-footer">\n            <button type="submit" class="btn">Envoyer</button>\n          </div>\n        </form>\n      </div>\n\n    </div>\n  </div>\n`,this.shadowRoot.appendChild(t.content.cloneNode(!0));const n=this.shadowRoot.querySelector("#treeContainer");n&&this.buildTree(n,this.jsonData,!0),this.shadowRoot.querySelectorAll("div.card").forEach((t=>{t.addEventListener("click",(n=>{const e=t.querySelector("p.hide, h3.hide, img.hide");e&&e.classList.toggle("hide")}))})),motifForm.addEventListener("submit",(async t=>{t.preventDefault();const n={...Object.fromEntries(new FormData(motifForm).entries()),prenom:this.GETNAME(),nom:this.GetLastName(),idPersonne:this.GetIdPersonne(),idAgent:this.GetIdAgent()};console.log("üìã Donn√©es envoy√©es au backend :",n);try{const t=await fetch("http://localhost:5000/api/motif",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}),e=await t.json();alert(`‚úÖ Donn√©es transmises au serveur !\n\nüìã Formulaire : ${JSON.stringify(e.formulaireRecu,null,2)}\n\nüì¶ Donn√©es envoy√©es au CRM : ${JSON.stringify(e.donneesEnvoyees,null,2)}\n\nüìû R√©ponse du CRM : ${e.reponseCRM}`)}catch(t){console.error("‚ùå Erreur envoi :",t),alert("Erreur lors de l‚Äôenvoi du formulaire !")}}));const e=this.shadowRoot.querySelector(".btns");e&&e.addEventListener("click",(async()=>{try{const t=await fetch("https://api.open-meteo.com/v1/forecast?latitude=48.8566&longitude=2.3522&current_weather=true");if(!t.ok)throw new Error("Erreur API m√©t√©o");const n=await t.json(),e=n.current_weather.temperature,o=n.current_weather.windspeed;console.log("üå§Ô∏è Temp√©rature √† Paris :",e,"¬∞C"),alert(`üå§Ô∏è Temp√©rature √† Paris : ${e}¬∞C\nVent : ${o} km/h`);const r=this.shadowRoot.querySelector(".btns + pre");r&&(r.textContent=JSON.stringify(n,null,2),r.classList.remove("hide"))}catch(t){console.error("‚ùå Erreur API m√©t√©o :",t),alert("Erreur lors de la r√©cup√©ration m√©t√©o.")}}));const o=this.shadowRoot.querySelector(".btncrm");o&&o.addEventListener("click",(async()=>{try{const t=await fetch("http://localhost:5000/api/token",{method:"POST"});if(!t.ok)throw new Error("Erreur lors de la r√©cup√©ration du token");const n=(await t.json().catch((()=>null)))?.access_token||null;if(!n)return alert("‚ùå Aucun access_token trouv√© dans la r√©ponse !"),void console.log("üîç R√©ponse brute du token :",await t.text());console.log("‚úÖ Token re√ßu :",n);const e=await fetch("http://localhost:5000/api/call",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n}`}}),o=await e.text();console.log("üìû R√©ponse de l‚ÄôAPI /call :",o),alert("üìû R√©ponse API /call : "+o)}catch(t){console.error("‚ùå Erreur lors du flux CRM :",t),alert("Erreur CRM : "+t.message)}}));const r=this.shadowRoot.querySelector(".btnpost"),a=this.shadowRoot.querySelector("#postResult");r.addEventListener("click",(async()=>{try{const t=await fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:"Test POST depuis Webex",body:`Utilisateur : ${this.GETNAME()} ${this.GetLastName()}`,userId:42})});if(!t.ok)throw new Error("Erreur POST "+t.status);const n=await t.json();console.log("‚úÖ R√©ponse POST :",n),a.textContent=JSON.stringify(n,null,2),alert("‚úÖ POST r√©ussi !")}catch(t){console.error("‚ùå Erreur POST :",t),a.textContent="Erreur : "+t.message}}))}attributeChangedCallback(t,n,e){if("name"===t)this.shadowRoot.querySelectorAll("h3").forEach((t=>t.innerText=e));else if("avatar"===t)this.shadowRoot.querySelectorAll("img").forEach((t=>t.src=e));else if("darkmode"===t){const t="true"===e;this.shadowRoot.querySelectorAll(".card").forEach((n=>{n.style.background=t?"#000":"#fff",n.style.color=t?"#fff":"#000"}))}}static get observedAttributes(){return["name","darkmode","avatar"]}}window.customElements.define("info-card",t)})();