(()=>{"use strict";class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.jsonData=this.getContractInfo(),this.render()}getContractInfo(){let n=this.cad;for(const t of n)try{const n=t[1].interaction.callAssociatedData.CONTRACT_INFO.value;if("string"==typeof n){const t=n.replace(/\\\\\\"/g,'"').replace(/\\\\/g,"\\");return JSON.parse(t)}return n}catch(n){return console.error("Error extracting contract info:",n),{error:"Invalid or missing CONTRAT_INFO"}}}GETNAME(){let n=this.cad;for(const t of n)try{return t[1].interaction.callAssociatedData.NAME.value}catch(n){return"error"}}GetLastName(){let n=this.cad;for(const t of n)try{return t[1].interaction.callAssociatedData.LAST_NAME.value}catch(n){return"error"}}GetNameUsage(){let n=this.cad;for(const t of n)try{return t[1].interaction.callAssociatedData.LAST_NAME_USAGE.value}catch(n){return"error"}}GetEmail(){let n=this.cad;for(const t of n)try{return t[1].interaction.callAssociatedData.EMAIL_USER.value}catch(n){return"error"}}GetIdPersonne(){let n=this.cad;for(const t of n)try{return t[1].interaction.callAssociatedData.ID_PERSONNE.value}catch(n){return"error"}}GetIdAgent(){let n=this.cad;for(const t of n)try{return t[1].interaction.callAssociatedData.ID_AGENT.value}catch(n){return"error"}}mediaInfo(){const n=this.cad;for(const t of n){const n=t[1].interaction.media;return Object.keys(n).map((t=>n[t]))}}activeParticipants(){const n=this.cad;for(const t of n){const n=t[1].interaction.media;return Object.keys(n).map((t=>{const{participants:e}=n[t];return e}))}}createTreeNode(n,t,e=!0){const o=document.createElement("div");o.classList.add("tree-node");const a=document.createElement("span");a.classList.add("label");const r=document.createElement("span");if(r.classList.add("toggle"),null!==t&&"object"==typeof t){r.textContent="+",o.appendChild(r),a.textContent=n,o.appendChild(a);const i=document.createElement("div");if(i.classList.add("children"),Array.isArray(t))t.forEach(((t,o)=>{const a=this.createTreeNode(`${n}[${o}]`,t,e);i.appendChild(a)}));else for(const n in t){const o=this.createTreeNode(n,t[n],e);i.appendChild(o)}o.appendChild(i),a.addEventListener("click",(()=>{const n=o.classList.toggle("expanded");r.textContent=n?"-":"+"})),e&&(o.classList.add("expanded"),r.textContent="-")}else r.textContent=" ",o.appendChild(r),a.textContent=`${n}: ${t}`,o.appendChild(a);return o}buildTree(n,t,e=!0){for(const o in t){const a=this.createTreeNode(o,t[o],e);n.appendChild(a)}}render(){const n=document.createElement("template");n.innerHTML=`\n  <style>\n    :host {\n      --primary: #007AA3;\n      --primary-hover: #005E7D;\n      --card-bg: rgba(255, 255, 255, 0.8);\n      --card-border: rgba(255, 255, 255, 0.3);\n      --text-color: #1a1a1a;\n      --shadow: 0 4px 12px rgba(0,0,0,0.1);\n      --radius: 16px;\n      font-family: "Inter", system-ui, sans-serif;\n      color: var(--text-color);\n    }\n\n    .container {\n      overflow: var(--flow, auto);\n      background: linear-gradient(135deg, #E0F7FA, #F3F4F6);\n      min-height: 100vh;\n      padding: 2rem;\n      display: flex;\n      justify-content: center;\n      align-items: flex-start;\n    }\n\n    .cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));\n      gap: 1.5rem;\n      width: 100%;\n      max-width: 1400px;\n    }\n\n    .card {\n      background: var(--card-bg);\n      border: 1px solid var(--card-border);\n      backdrop-filter: blur(12px);\n      border-radius: var(--radius);\n      padding: 1.2rem;\n      box-shadow: var(--shadow);\n      transition: transform 0.25s ease, box-shadow 0.25s ease;\n    }\n\n    .card:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 8px 20px rgba(0,0,0,0.15);\n    }\n\n    img {\n      margin-top: 15px;\n      border-radius: 12px;\n      width: 100%;\n      height: auto;\n      display: block;\n      object-fit: cover;\n    }\n\n    .hide {\n      display: none;\n    }\n\n    .btn, .btns, .btnpost {\n      border: none;\n      height: 40px;\n      padding: 0 20px;\n      border-radius: 24px;\n      background: var(--primary);\n      color: #fff;\n      font-weight: 500;\n      letter-spacing: 0.4px;\n      cursor: pointer;\n      transition: background 0.3s, transform 0.2s;\n      box-shadow: 0 3px 6px rgba(0,0,0,0.15);\n      margin-top: 10px;\n    }\n\n    .btn:hover, .btns:hover, .btnpost:hover {\n      background: var(--primary-hover);\n      transform: translateY(-2px);\n    }\n\n    pre {\n      background: #f3f3f3;\n      padding: 0.8rem;\n      border-radius: 8px;\n      overflow-x: auto;\n      font-size: 0.9rem;\n      margin-top: 1rem;\n    }\n\n    .form-motif {\n      width: 100%;\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n    }\n\n    .form-grid {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 2rem;\n      align-items: start;\n    }\n\n    .col-left label,\n    .col-right label {\n      font-weight: 600;\n      font-size: 0.95rem;\n      color: #333;\n      display: block;\n      margin-bottom: 0.4rem;\n    }\n\n    select,\n    textarea {\n      width: 90%;\n      border: 1px solid #ccc;\n      border-radius: 8px;\n      padding: 0.5rem 0.75rem;\n      font-size: 0.9rem;\n      background-color: #fff;\n      box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);\n      transition: border 0.2s, box-shadow 0.2s;\n    }\n\n    select:focus,\n    textarea:focus {\n      outline: none;\n      border-color: var(--primary);\n      box-shadow: 0 0 0 3px rgba(0,122,163,0.2);\n    }\n\n    textarea {\n      resize: vertical;\n      min-height: 130px;\n    }\n\n    .col-right span {\n      font-size: 0.8rem;\n      font-weight: normal;\n      color: #666;\n    }\n\n    .form-footer {\n      display: flex;\n      justify-content: flex-end;\n      margin-top: 1rem;\n    }\n\n  </style>\n\n  <div class="container">\n    <div class="cards">\n      \n      <div class="card">\n        <h3 class="italic">Informations Utilisateur</h3>\n        <p><strong>Prénom:</strong> ${this.GETNAME()}</p>\n        <p><strong>Nom:</strong> ${this.GetLastName()}</p>\n        <p><strong>Nom d’usage:</strong> ${this.GetNameUsage()}</p>\n        <p><strong>Email:</strong> ${this.GetEmail()}</p>\n        <p><strong>Id personne:</strong> ${this.GetIdPersonne()}</p>\n        <p><strong>Id agent:</strong> ${this.GetIdAgent()}</p>\n      </div>\n\n      <div id="treeContainer" class="card">\n        <h3 class="italic">Structure</h3>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Détails</h3>\n        <button class="btn">Afficher les détails</button>\n        <pre class="hide">${JSON.stringify(this.details,null,2)}</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Bouton météo</h3>\n        <button class="btns">Afficher la météo</button>\n        <pre class="hide"></pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Test POST API publique</h3>\n        <button class="btnpost">Tester un POST</button>\n        <pre id="postResult">Résultat du POST ici...</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Test POST avec Authentification (CRM Conservateur)</h3>\n        <button class="btncrm">Envoyer vers CRM</button>\n        <pre id="crmResult">Résultat du CRM ici...</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Motif de l'appel</h3>\n        <form id="motifForm" class="form-motif">\n          <div class="form-grid">\n            \x3c!-- Colonne gauche --\x3e\n            <div class="col-left">\n              <label>Motif :</label>\n              <select name="motif" required>\n                <option value="">-- Sélectionner --</option>\n                <option value="RELA">Relance</option>\n                <option value="IGES">Information gestion</option>\n                <option value="DCME">Documents / duplicata</option>\n                <option value="ADEM">Autres demandes</option>\n                <option value="CLIB">Commentaire libre</option>\n              </select>\n\n              <label>Sous-motif 1 :</label>\n              <select name="sousMotif1">\n                <option value="">-- Sélectionner --</option>\n                <option value="ECLI">Espace client</option>\n                <option value="JRID">Juridique</option>\n                <option value="PRDI">Produit</option>\n                <option value="DPLI">Duplicata</option>\n                <option value="REPA">Répartition</option>\n                <option value="VCNT">Valeur contrat</option>\n                <option value="FISC">Fiscalité</option>\n                <option value="AECH">Avis d'échéance</option>\n                <option value="PGES">Procédure de gestion</option>\n                <option value="PRES">Prestations</option>\n                <option value="CFIS">Certificats fiscaux</option>\n                <option value="APER">Avis d'opération</option>\n                <option value="PRDC">Production</option>\n                <option value="CEXC">Courrier d'excuses</option>\n                <option value="MPAS">Mot de passe</option>\n                <option value="LCBF">LCB/FT</option>\n                <option value="CCMM">Contact commercial</option>\n                <option value="RDS">RDS</option>\n                <option value="VIEC">Vie du contrat</option>\n                <option value="XXXX">xxxxxxxxx</option>\n              </select>\n\n              <label>Sous-motif 2 :</label>\n              <select name="sousMotif2">\n                <option value="">-- Sélectionner --</option>\n                <option value="DECE">Décès</option>\n                <option value="RVIG">Remise en vigueur</option>\n                <option value="NANT">Nantissement / Main levée</option>\n                <option value="CRIB">Changement de RIB</option>\n                <option value="VCP">VCP</option>\n                <option value="CECH">Contrat échu</option>\n                <option value="RPRG">Rachat programmé</option>\n                <option value="RENT">Rentes</option>\n                <option value="INTE">Intérêts / remboursement d'avance</option>\n                <option value="TSRT">Transfert sortant</option>\n                <option value="FRGS">Fourgous</option>\n                <option value="CRRE">Correction</option>\n                <option value="PREL">Prélèvement / appel de cotisation</option>\n                <option value="VIDE">Vide</option>\n                <option value="CPER">Chèque périmé</option>\n                <option value="TENT">Transfert entrant</option>\n                <option value="ECKE">Eckert</option>\n                <option value="CAVA">Création d'avance</option>\n                <option value="ARBI">Arbitrage</option>\n                <option value="CADR">Changement d'adresse</option>\n                <option value="FCP">FCP</option>\n                <option value="RTTA">Rachat total</option>\n                <option value="RPAR">Rachat partiel</option>\n                <option value="BENE">Bénéficiaire</option>\n                <option value="FCNT">Fiche contact</option>\n                <option value="AN">AN</option>\n                <option value="OGES">Option de gestion</option>\n                <option value="MFRA">Modification frais de gestion</option>\n                <option value="RENN">Renonciation</option>\n                <option value="INST">Instance</option>\n              </select>\n            </div>\n            \x3c!-- Colonne droite --\x3e\n            <div class="col-right">\n              <label>Commentaires <span>(255 caractères)</span> :</label>\n              <textarea name="commentaire" rows="6" maxlength="255" placeholder="Saisissez un commentaire..."></textarea>\n            </div>\n          </div>\n          <div class="form-footer">\n            <button type="submit" class="btn">Envoyer</button>\n          </div>\n        </form>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Tâches à réaliser</h3>\n        <form id="tacheForm" class="form-tache">\n          <div class="form-grid">\n            \x3c!-- Colonne gauche --\x3e\n            <div class="col-left">\n              <label>Tâche :</label>\n              <select name="tache" required>\n                <option value="">-- Sélectionner --</option>\n                <option value="RELA">Relance</option>\n                <option value="IGES">Information gestion</option>\n                <option value="DCME">Documents / duplicata</option>\n                <option value="ADEM">Autres demandes</option>\n                <option value="CLIB">Commentaire libre</option>\n              </select>\n\n            <label>Date de fin de tâche souhaitée :</label>  \n              <input\n              type="date"\n              id="dateTache"\n              name="dateTache"\n              required\n              min="${(new Date).toISOString().split("T")[0]}"\n            />\n            </div>\n            \x3c!-- Colonne droite --\x3e\n            <div class="col-right">\n              <label>Commentaires <span>(255 caractères)</span> :</label>\n              <textarea name="commentaire" rows="6" maxlength="255" placeholder="Saisissez un commentaire..."></textarea>\n            </div>\n          </div>\n          <div class="form-footer">\n            <button type="submit" class="btn">Envoyer</button>\n          </div>\n        </form>\n      </div>\n\n    </div>\n  </div>\n`,this.shadowRoot.appendChild(n.content.cloneNode(!0));const t=this.shadowRoot.querySelector("#treeContainer");t&&this.buildTree(t,this.jsonData,!0),this.shadowRoot.querySelectorAll("div.card").forEach((n=>{n.addEventListener("click",(t=>{const e=n.querySelector("p.hide, h3.hide, img.hide");e&&e.classList.toggle("hide")}))}));const e=this.shadowRoot.querySelector("#motifForm"),o=this;e&&e.addEventListener("submit",(async n=>{n.preventDefault();const t={...Object.fromEntries(new FormData(e).entries()),prenom:o.GETNAME(),nom:o.GetLastName(),idPersonne:o.GetIdPersonne(),idAgent:o.GetIdAgent()};console.log("📋 Données envoyées au backend :",t);try{const n=await fetch("http://localhost:5000/api/motif",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),e=await n.json();alert(`✅ Données transmises au serveur !\n\n📋 Formulaire : ${JSON.stringify(e.formulaireRecu,null,2)}\n\n📦 Données envoyées au CRM : ${JSON.stringify(e.donneesEnvoyees,null,2)}\n\n📞 Réponse du CRM : ${e.reponseCRM}`)}catch(n){console.error("❌ Erreur envoi :",n),alert("Erreur lors de l’envoi du formulaire !")}}));const a=this.shadowRoot.querySelector(".btns");a&&a.addEventListener("click",(async()=>{try{const n=await fetch("https://api.open-meteo.com/v1/forecast?latitude=48.8566&longitude=2.3522&current_weather=true");if(!n.ok)throw new Error("Erreur API météo");const t=await n.json(),e=t.current_weather.temperature,o=t.current_weather.windspeed;console.log("🌤️ Température à Paris :",e,"°C"),alert(`🌤️ Température à Paris : ${e}°C\nVent : ${o} km/h`);const a=this.shadowRoot.querySelector(".btns + pre");a&&(a.textContent=JSON.stringify(t,null,2),a.classList.remove("hide"))}catch(n){console.error("❌ Erreur API météo :",n),alert("Erreur lors de la récupération météo.")}}));const r=this.shadowRoot.querySelector(".btncrm");r&&r.addEventListener("click",(async()=>{try{const n=await fetch("http://localhost:5000/api/token",{method:"POST"});if(!n.ok)throw new Error("Erreur lors de la récupération du token");const t=(await n.json().catch((()=>null)))?.access_token||null;if(!t)return alert("❌ Aucun access_token trouvé dans la réponse !"),void console.log("🔍 Réponse brute du token :",await n.text());console.log("✅ Token reçu :",t);const e=await fetch("http://localhost:5000/api/call",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`}}),o=await e.text();console.log("📞 Réponse de l’API /call :",o),alert("📞 Réponse API /call : "+o)}catch(n){console.error("❌ Erreur lors du flux CRM :",n),alert("Erreur CRM : "+n.message)}}));const i=this.shadowRoot.querySelector(".btnpost"),s=this.shadowRoot.querySelector("#postResult");i.addEventListener("click",(async()=>{try{const n=await fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:"Test POST depuis Webex",body:`Utilisateur : ${this.GETNAME()} ${this.GetLastName()}`,userId:42})});if(!n.ok)throw new Error("Erreur POST "+n.status);const t=await n.json();console.log("✅ Réponse POST :",t),s.textContent=JSON.stringify(t,null,2),alert("✅ POST réussi !")}catch(n){console.error("❌ Erreur POST :",n),s.textContent="Erreur : "+n.message}}))}attributeChangedCallback(n,t,e){if("name"===n)this.shadowRoot.querySelectorAll("h3").forEach((n=>n.innerText=e));else if("avatar"===n)this.shadowRoot.querySelectorAll("img").forEach((n=>n.src=e));else if("darkmode"===n){const n="true"===e;this.shadowRoot.querySelectorAll(".card").forEach((t=>{t.style.background=n?"#000":"#fff",t.style.color=n?"#fff":"#000"}))}}static get observedAttributes(){return["name","darkmode","avatar"]}}window.customElements.define("info-card",n)})();