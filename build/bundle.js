(()=>{"use strict";class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.jsonData=this.getContractInfo(),this.render()}getContractInfo(){let t=this.cad;for(const e of t)try{const t=e[1].interaction.callAssociatedData.CONTRACT_INFO.value;if("string"==typeof t){const e=t.replace(/\\\\\\"/g,'"').replace(/\\\\/g,"\\");return JSON.parse(e)}return t}catch(t){return console.error("Error extracting contract info:",t),{error:"Invalid or missing CONTRAT_INFO"}}}GETNAME(){let t=this.cad;for(const e of t)try{return e[1].interaction.callAssociatedData.NAME.value}catch(t){return"error"}}GetLastName(){let t=this.cad;for(const e of t)try{return e[1].interaction.callAssociatedData.LAST_NAME.value}catch(t){return"error"}}GetNameUsage(){let t=this.cad;for(const e of t)try{return e[1].interaction.callAssociatedData.LAST_NAME_USAGE.value}catch(t){return"error"}}GetEmail(){let t=this.cad;for(const e of t)try{return e[1].interaction.callAssociatedData.EMAIL_USER.value}catch(t){return"error"}}mediaInfo(){const t=this.cad;for(const e of t){const t=e[1].interaction.media;return Object.keys(t).map((e=>t[e]))}}activeParticipants(){const t=this.cad;for(const e of t){const t=e[1].interaction.media;return Object.keys(t).map((e=>{const{participants:n}=t[e];return n}))}}createTreeNode(t,e,n=!0){const r=document.createElement("div");r.classList.add("tree-node");const a=document.createElement("span");a.classList.add("label");const o=document.createElement("span");if(o.classList.add("toggle"),null!==e&&"object"==typeof e){o.textContent="+",r.appendChild(o),a.textContent=t,r.appendChild(a);const s=document.createElement("div");if(s.classList.add("children"),Array.isArray(e))e.forEach(((e,r)=>{const a=this.createTreeNode(`${t}[${r}]`,e,n);s.appendChild(a)}));else for(const t in e){const r=this.createTreeNode(t,e[t],n);s.appendChild(r)}r.appendChild(s),a.addEventListener("click",(()=>{const t=r.classList.toggle("expanded");o.textContent=t?"-":"+"})),n&&(r.classList.add("expanded"),o.textContent="-")}else o.textContent=" ",r.appendChild(o),a.textContent=`${t}: ${e}`,r.appendChild(a);return r}buildTree(t,e,n=!0){for(const r in e){const a=this.createTreeNode(r,e[r],n);t.appendChild(a)}}render(){const t=document.createElement("template");t.innerHTML=`\n  <style>\n    :host {\n      --primary: #007AA3;\n      --primary-hover: #005E7D;\n      --card-bg: rgba(255, 255, 255, 0.8);\n      --card-border: rgba(255, 255, 255, 0.3);\n      --text-color: #1a1a1a;\n      --shadow: 0 4px 12px rgba(0,0,0,0.1);\n      --radius: 16px;\n      font-family: "Inter", system-ui, sans-serif;\n      color: var(--text-color);\n    }\n\n    .container {\n      overflow: var(--flow, auto);\n      background: linear-gradient(135deg, #E0F7FA, #F3F4F6);\n      min-height: 100vh;\n      padding: 2rem;\n      display: flex;\n      justify-content: center;\n      align-items: flex-start;\n    }\n\n    .cards {\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));\n      gap: 1.5rem;\n      width: 100%;\n      max-width: 1400px;\n    }\n\n    .card {\n      background: var(--card-bg);\n      border: 1px solid var(--card-border);\n      backdrop-filter: blur(12px);\n      border-radius: var(--radius);\n      padding: 1.2rem;\n      box-shadow: var(--shadow);\n      transition: transform 0.25s ease, box-shadow 0.25s ease;\n    }\n\n    .card:hover {\n      transform: translateY(-4px);\n      box-shadow: 0 8px 20px rgba(0,0,0,0.15);\n    }\n\n    img {\n      margin-top: 15px;\n      border-radius: 12px;\n      width: 100%;\n      height: auto;\n      display: block;\n      object-fit: cover;\n    }\n\n    .hide {\n      display: none;\n    }\n\n    .btn, .btns, .btnpost {\n      border: none;\n      height: 40px;\n      padding: 0 20px;\n      border-radius: 24px;\n      background: var(--primary);\n      color: #fff;\n      font-weight: 500;\n      letter-spacing: 0.4px;\n      cursor: pointer;\n      transition: background 0.3s, transform 0.2s;\n      box-shadow: 0 3px 6px rgba(0,0,0,0.15);\n      margin-top: 10px;\n    }\n\n    .btn:hover, .btns:hover, .btnpost:hover {\n      background: var(--primary-hover);\n      transform: translateY(-2px);\n    }\n\n    pre {\n      background: #f3f3f3;\n      padding: 0.8rem;\n      border-radius: 8px;\n      overflow-x: auto;\n      font-size: 0.9rem;\n      margin-top: 1rem;\n    }\n\n  </style>\n\n  <div class="container">\n    <div class="cards">\n      \n      <div class="card">\n        <h3 class="italic">Informations Utilisateur</h3>\n        <p><strong>Pr√©nom:</strong> ${this.GETNAME()}</p>\n        <p><strong>Nom:</strong> ${this.GetLastName()}</p>\n        <p><strong>Nom d‚Äôusage:</strong> ${this.GetNameUsage()}</p>\n        <p><strong>Email:</strong> ${this.GetEmail()}</p>\n      </div>\n\n      <div id="treeContainer" class="card">\n        <h3 class="italic">Structure</h3>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">D√©tails</h3>\n        <button class="btn">Afficher les d√©tails</button>\n        <pre class="hide">${JSON.stringify(this.details,null,2)}</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Bouton m√©t√©o</h3>\n        <button class="btns">Afficher la m√©t√©o</button>\n        <pre class="hide"></pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Test POST API publique</h3>\n        <button class="btnpost">Tester un POST</button>\n        <pre id="postResult">R√©sultat du POST ici...</pre>\n      </div>\n\n      <div class="card">\n        <h3 class="italic">Test POST avec Authentification (CRM Conservateur)</h3>\n        <button class="btncrm">Envoyer vers CRM</button>\n        <pre id="crmResult">R√©sultat du CRM ici...</pre>\n      </div>\n    </div>\n  </div>\n`,this.shadowRoot.appendChild(t.content.cloneNode(!0));const e=this.shadowRoot.querySelector("#treeContainer");e&&this.buildTree(e,this.jsonData,!0),this.shadowRoot.querySelectorAll("div.card").forEach((t=>{t.addEventListener("click",(e=>{const n=t.querySelector("p.hide, h3.hide, img.hide");n&&n.classList.toggle("hide")}))}));const n=this.shadowRoot.querySelector(".btns");n&&n.addEventListener("click",(async()=>{try{const t=await fetch("https://api.open-meteo.com/v1/forecast?latitude=48.8566&longitude=2.3522&current_weather=true");if(!t.ok)throw new Error("Erreur API m√©t√©o");const e=await t.json(),n=e.current_weather.temperature,r=e.current_weather.windspeed;console.log("üå§Ô∏è Temp√©rature √† Paris :",n,"¬∞C"),alert(`üå§Ô∏è Temp√©rature √† Paris : ${n}¬∞C\nVent : ${r} km/h`);const a=this.shadowRoot.querySelector(".btns + pre");a&&(a.textContent=JSON.stringify(e,null,2),a.classList.remove("hide"))}catch(t){console.error("‚ùå Erreur API m√©t√©o :",t),alert("Erreur lors de la r√©cup√©ration m√©t√©o.")}})),this.shadowRoot.querySelector(".btncrm").addEventListener("click",(async()=>{try{const t=await fetch("http://localhost:5000/api/token",{method:"POST"}),e=await t.text();console.log("üîë R√©ponse token :",e),alert("R√©sultat token : "+e)}catch(t){console.error("‚ùå Erreur :",t),alert("Erreur token !")}}));const r=this.shadowRoot.querySelector(".btnpost"),a=this.shadowRoot.querySelector("#postResult");r.addEventListener("click",(async()=>{try{const t=await fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:"Test POST depuis Webex",body:`Utilisateur : ${this.GETNAME()} ${this.GetLastName()}`,userId:42})});if(!t.ok)throw new Error("Erreur POST "+t.status);const e=await t.json();console.log("‚úÖ R√©ponse POST :",e),a.textContent=JSON.stringify(e,null,2),alert("‚úÖ POST r√©ussi !")}catch(t){console.error("‚ùå Erreur POST :",t),a.textContent="Erreur : "+t.message}}))}attributeChangedCallback(t,e,n){if("name"===t)this.shadowRoot.querySelectorAll("h3").forEach((t=>t.innerText=n));else if("avatar"===t)this.shadowRoot.querySelectorAll("img").forEach((t=>t.src=n));else if("darkmode"===t){const t="true"===n;this.shadowRoot.querySelectorAll(".card").forEach((e=>{e.style.background=t?"#000":"#fff",e.style.color=t?"#fff":"#000"}))}}static get observedAttributes(){return["name","darkmode","avatar"]}}window.customElements.define("info-card",t)})();